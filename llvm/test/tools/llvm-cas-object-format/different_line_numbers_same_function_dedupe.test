// In this test, the same source code is compiled into two different object files, the difference is that one of them has an extra new line in the beginning, it tests duplication with different line numbers and tests the resilience of the line numbers. This expects that no duplication happens right now in any blocks

RUN: rm -rf %t && mkdir -p %t
RUN: split-file %s %t

RUN: llc %t/temp_a.ll -O0 --filetype=obj -o %t/temp_a.o
RUN: llc %t/temp_b.ll -O0 --filetype=obj -o %t/temp_b.o
RUN: find %t -name "*.o" &> %t/objects_to_ingest
RUN: llvm-cas-object-format --cas %t/cas --ingest-schema=nestedv1 @%t/objects_to_ingest -silent > %t/output.casid
RUN: llvm-cas-object-format --cas %t/cas --ingest-schema=nestedv1 --print-cas-tree @%t/output.casid | FileCheck %s --check-prefix NESTED

RUN: llvm-cas-object-format --cas %t/cas --ingest-schema=flatv1 @%t/objects_to_ingest -silent > %t/output.casid
RUN: llvm-cas-object-format --cas %t/cas --ingest-schema=flatv1 --print-cas-tree @%t/output.casid | FileCheck %s --check-prefix FLAT

NESTED: SECTION: __DWARF,__debug_line | MemProt: RW-
NESTED-NEXT: {
NESTED:   BLOCK: size = 0x{{[a-z0-9]+}}, align = {{[0-9]+}}, alignment-offset = {{[0-9]+}}
NESTED-NEXT:   Block-Cas-ID: llvmcas://[[UNIQUE_CAS_ID:[a-z0-9]+]]
NESTED-NEXT:   {
NESTED-NEXT:     SYMBOL: {{.*}} | offset: 0x{{[0-9]+}}, linkage: {{.*}}, scope: {{.*}}, {{.*}}
NESTED-NEXT:     FIXUP: 0x{{[a-z0-9]+}}, addend = +0x{{[a-z0-9]+}}, kind = {{.*}}, target = {{.*}}a{{.*}}
NESTED-NEXT:   }
NESTED:   BLOCK: size = 0x{{[a-z0-9]+}}, align = {{[0-9]+}}, alignment-offset = {{[0-9]+}}
NESTED-NEXT:   Block-Cas-ID: llvmcas://[[DEBUG_LINE_BLOCK_CAS_ID:[a-z0-9]+]]
NESTED-NEXT:   {
NESTED-NEXT:     SYMBOL: {{.+}} | offset: 0x{{[a-z0-9]+}}, linkage: {{.*}}, scope: {{.*}}, {{.*}}
NESTED-NEXT:     FIXUP: 0x{{[a-z0-9]+}}, addend = +0x{{[a-z0-9]+}}, kind = {{.*}}, target = {{.*}}foo{{.*}}
NESTED-NEXT:   }
NESTED-NEXT: }


NESTED: SECTION: __DWARF,__debug_line | MemProt: RW-
NESTED-NEXT: {
NESTED:   BLOCK: size = 0x{{[a-z0-9]+}}, align = {{[0-9]+}}, alignment-offset = {{[0-9]+}}
NESTED-NOT:   Block-Cas-ID: llvmcas://[[UNIQUE_CAS_ID]]
NESTED:   {
NESTED-NEXT:     SYMBOL: {{.*}} | offset: 0x{{[0-9]+}}, linkage: {{.*}}, scope: {{.*}}, {{.*}}
NESTED-NEXT:     FIXUP: 0x{{[a-z0-9]+}}, addend = +0x{{[a-z0-9]+}}, kind = {{.*}}, target = {{.*}}a{{.*}}
NESTED-NEXT:   }
NESTED:   BLOCK: size = 0x{{[a-z0-9]+}}, align = {{[0-9]+}}, alignment-offset = {{[0-9]+}}
NESTED-NOT:   Block-Cas-ID: llvmcas://[[DEBUG_LINE_BLOCK_CAS_ID]]
NESTED:   {
NESTED-NEXT:     SYMBOL: {{.+}} | offset: 0x{{[a-z0-9]+}}, linkage: {{.*}}, scope: {{.*}}, {{.*}}
NESTED-NEXT:     FIXUP: 0x{{[a-z0-9]+}}, addend = +0x{{[a-z0-9]+}}, kind = {{.*}}, target = {{.*}}foo{{.*}}
NESTED-NEXT:   }
NESTED-NEXT: }


FLAT: SECTION: __DWARF,__debug_line | MemProt: RW-
FLAT-NEXT: {
FLAT:   BLOCK: size = 0x{{[a-z0-9]+}}, align = {{[0-9]+}}, alignment-offset = {{[0-9]+}}
FLAT-NEXT:   Block-Cas-ID: llvmcas://[[UNIQUE_CAS_ID:[a-z0-9]+]]
FLAT-NEXT:   {
FLAT-NEXT:     SYMBOL: {{.*}} | offset: 0x{{[0-9]+}}, linkage: {{.*}}, scope: {{.*}}, {{.*}}
FLAT-NEXT:     FIXUP: 0x{{[a-z0-9]+}}, addend = +0x{{[a-z0-9]+}}, kind = {{.*}}, target = {{.*}}a{{.*}}
FLAT-NEXT:   }
FLAT:   BLOCK: size = 0x{{[a-z0-9]+}}, align = {{[0-9]+}}, alignment-offset = {{[0-9]+}}
FLAT-NEXT:   Block-Cas-ID: llvmcas://[[DEBUG_LINE_BLOCK_CAS_ID:[a-z0-9]+]]
FLAT-NEXT:   {
FLAT-NEXT:     SYMBOL: {{.+}} | offset: 0x{{[a-z0-9]+}}, linkage: {{.*}}, scope: {{.*}}, {{.*}}
FLAT-NEXT:     FIXUP: 0x{{[a-z0-9]+}}, addend = +0x{{[a-z0-9]+}}, kind = {{.*}}, target = {{.*}}foo{{.*}}
FLAT-NEXT:   }
FLAT-NEXT: }


FLAT: SECTION: __DWARF,__debug_line | MemProt: RW-
FLAT-NEXT: {
FLAT:   BLOCK: size = 0x{{[a-z0-9]+}}, align = {{[0-9]+}}, alignment-offset = {{[0-9]+}}
FLAT-NOT:   Block-Cas-ID: llvmcas://[[UNIQUE_CAS_ID]]
FLAT:   {
FLAT-NEXT:     SYMBOL: {{.*}} | offset: 0x{{[0-9]+}}, linkage: {{.*}}, scope: {{.*}}, {{.*}}
FLAT-NEXT:     FIXUP: 0x{{[a-z0-9]+}}, addend = +0x{{[a-z0-9]+}}, kind = {{.*}}, target = {{.*}}a{{.*}}
FLAT-NEXT:   }
FLAT:   BLOCK: size = 0x{{[a-z0-9]+}}, align = {{[0-9]+}}, alignment-offset = {{[0-9]+}}
FLAT-NOT:   Block-Cas-ID: llvmcas://[[DEBUG_LINE_BLOCK_CAS_ID]]
FLAT:   {
FLAT-NEXT:     SYMBOL: {{.+}} | offset: 0x{{[a-z0-9]+}}, linkage: {{.*}}, scope: {{.*}}, {{.*}}
FLAT-NEXT:     FIXUP: 0x{{[a-z0-9]+}}, addend = +0x{{[a-z0-9]+}}, kind = {{.*}}, target = {{.*}}foo{{.*}}
FLAT-NEXT:   }
FLAT-NEXT: }

//--- temp_a.ll
; ModuleID = 'temp_a.cpp'
source_filename = "temp_a.cpp"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx12.0.0"

; Function Attrs: mustprogress noinline optnone ssp uwtable
define noundef i32 @_Z1av() #0 !dbg !9 {
entry:
  %call = call noundef i32 @_Z3fooIiET_S0_(i32 noundef 2), !dbg !14
  ret i32 %call, !dbg !15
}

; Function Attrs: mustprogress noinline nounwind optnone ssp uwtable
define linkonce_odr noundef i32 @_Z3fooIiET_S0_(i32 noundef %s) #1 !dbg !16 {
entry:
  %s.addr = alloca i32, align 4
  store i32 %s, ptr %s.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %s.addr, metadata !21, metadata !DIExpression()), !dbg !22
  %0 = load i32, ptr %s.addr, align 4, !dbg !23
  %1 = load i32, ptr %s.addr, align 4, !dbg !24
  %mul = mul nsw i32 %0, %1, !dbg !25
  ret i32 %mul, !dbg !26
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

attributes #0 = { mustprogress noinline optnone ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress noinline nounwind optnone ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nosync nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7}
!llvm.ident = !{!8}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: "clang version 16.0.0 (https://github.com/apple/llvm-project.git bbb984fa5a46b27c0c628ae79b7e4f033ad66c1e)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None, sysroot: "/", casFriendly: DebugLineOnly)
!1 = !DIFile(filename: "temp_a.cpp", directory: "/Users/shubham/Development/changeTest")
!2 = !{i32 7, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 7, !"PIC Level", i32 2}
!6 = !{i32 7, !"uwtable", i32 2}
!7 = !{i32 7, !"frame-pointer", i32 2}
!8 = !{!"clang version 16.0.0 (https://github.com/apple/llvm-project.git)"}
!9 = distinct !DISubprogram(name: "a", linkageName: "_Z1av", scope: !1, file: !1, line: 5, type: !10, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !13)
!10 = !DISubroutineType(types: !11)
!11 = !{!12}
!12 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!13 = !{}
!14 = !DILocation(line: 6, column: 10, scope: !9)
!15 = !DILocation(line: 6, column: 3, scope: !9)
!16 = distinct !DISubprogram(name: "foo<int>", linkageName: "_Z3fooIiET_S0_", scope: !1, file: !1, line: 2, type: !17, scopeLine: 2, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, templateParams: !19, retainedNodes: !13)
!17 = !DISubroutineType(types: !18)
!18 = !{!12, !12}
!19 = !{!20}
!20 = !DITemplateTypeParameter(name: "T", type: !12)
!21 = !DILocalVariable(name: "s", arg: 1, scope: !16, file: !1, line: 2, type: !12)
!22 = !DILocation(line: 2, column: 9, scope: !16)
!23 = !DILocation(line: 3, column: 10, scope: !16)
!24 = !DILocation(line: 3, column: 14, scope: !16)
!25 = !DILocation(line: 3, column: 12, scope: !16)
!26 = !DILocation(line: 3, column: 3, scope: !16)

//--- temp_b.ll
; ModuleID = 'temp_b.cpp'
source_filename = "temp_b.cpp"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx12.0.0"

; Function Attrs: mustprogress noinline optnone ssp uwtable
define noundef i32 @_Z1av() #0 !dbg !9 {
entry:
  %call = call noundef i32 @_Z3fooIiET_S0_(i32 noundef 2), !dbg !14
  ret i32 %call, !dbg !15
}

; Function Attrs: mustprogress noinline nounwind optnone ssp uwtable
define linkonce_odr noundef i32 @_Z3fooIiET_S0_(i32 noundef %s) #1 !dbg !16 {
entry:
  %s.addr = alloca i32, align 4
  store i32 %s, ptr %s.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %s.addr, metadata !21, metadata !DIExpression()), !dbg !22
  %0 = load i32, ptr %s.addr, align 4, !dbg !23
  %1 = load i32, ptr %s.addr, align 4, !dbg !24
  %mul = mul nsw i32 %0, %1, !dbg !25
  ret i32 %mul, !dbg !26
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

attributes #0 = { mustprogress noinline optnone ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress noinline nounwind optnone ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nosync nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7}
!llvm.ident = !{!8}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: "clang version 16.0.0 (https://github.com/apple/llvm-project.git bbb984fa5a46b27c0c628ae79b7e4f033ad66c1e)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None, sysroot: "/", casFriendly: DebugLineOnly)
!1 = !DIFile(filename: "temp_b.cpp", directory: "/Users/shubham/Development/changeTest")
!2 = !{i32 7, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 7, !"PIC Level", i32 2}
!6 = !{i32 7, !"uwtable", i32 2}
!7 = !{i32 7, !"frame-pointer", i32 2}
!8 = !{!"clang version 16.0.0 (https://github.com/apple/llvm-project.git)"}
!9 = distinct !DISubprogram(name: "a", linkageName: "_Z1av", scope: !1, file: !1, line: 5, type: !10, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !13)
!10 = !DISubroutineType(types: !11)
!11 = !{!12}
!12 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!13 = !{}
!14 = !DILocation(line: 6, column: 10, scope: !9)
!15 = !DILocation(line: 6, column: 3, scope: !9)
!16 = distinct !DISubprogram(name: "foo<int>", linkageName: "_Z3fooIiET_S0_", scope: !1, file: !1, line: 2, type: !17, scopeLine: 2, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, templateParams: !19, retainedNodes: !13)
!17 = !DISubroutineType(types: !18)
!18 = !{!12, !12}
!19 = !{!20}
!20 = !DITemplateTypeParameter(name: "T", type: !12)
!21 = !DILocalVariable(name: "s", arg: 1, scope: !16, file: !1, line: 2, type: !12)
!22 = !DILocation(line: 2, column: 9, scope: !16)
!23 = !DILocation(line: 3, column: 10, scope: !16)
!24 = !DILocation(line: 3, column: 14, scope: !16)
!25 = !DILocation(line: 3, column: 12, scope: !16)
!26 = !DILocation(line: 3, column: 3, scope: !16)

;temp_a.cpp
;template <typename T>
;T foo(T s) {
;  return s * s;
;}
;int a() {
;  return foo<int>(2);
;}

;temp_b.cpp
;template <typename T>
;T foo(T s) {
;  return s * s;
;}
;int a() {
;  return foo<int>(2);
;}